Create database:mongo_pratice
>use mongo_practice
switched to db mongo_practice
> db.movies.insertOne(
... {
... title: "Fight Club",
... writer:"Chuck Palahniuko",
... year:1999,
... actor:[
... "Brad Pitt","Edward Norton"]
... }
... )
{
        "acknowledged" : true,
        "insertedId" : ObjectId("607585d46906a1ab5e88c92e")
}
> db.movies.insert(
...{
...title:"Pulp Fiction",
...writer:"Quentin Tarantino",
...years:1994,
...actors:[
... "John Travolta","Uma Thurman"]
... })
WriteResult({ "nInserted" : 1 })
> db.movies.insert({
...title : "Inglorious Basterds",
...writer : "Quentin Tarantino",
...year: 2009,
...actor : [
... "Brad Pitt", "Diane Kruger","Eli Roth" ]
...})
WriteResult({ "nInserted" : 1 })
> db.movies.insert(
... {
...title : "Hobbit:An Unexpected Journey",
...writer : "J.R.R.R.Tolkein",
...year: 2012,
...franchise:"The Hobbit"
...})
WriteResult({ "nInserted" : 1 })
>db.movies.insert(
...{
...title : "The Hobbit:The Desolation of Smaug",
... writer : "J.R.R.R.Tolkein",
... year: 2013,
... franchise:"The Hobbit"
...})
WriteResult({ "nInserted" : 1 })
db.movies.insert(
... {
...title : "The Hobbit:The Battle of the Five Armies",
...writer : "J.R.R.R.Tolkein",
...year: 2012,
...franchise:"The Hobbit",
... synopsis:"Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness"
...})
WriteResult({ "nInserted" : 1 })
 db.movies.insert({
... title:"Pee Wee Herman's Big Advanture"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({
...title:"Avatar"})
WriteResult({ "nInserted" : 1 })

Query/Find Documents:

1.Get all Documents.
 db.movies.find()
{ "_id" : ObjectId("607587856906a1ab5e88c92f"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : 1999, "actor" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("60758c016906a1ab5e88c930"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : 1994, "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("60758c136906a1ab5e88c931"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : 2009, "actor" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }
{ "_id" : ObjectId("60758c2c6906a1ab5e88c932"), "title" : "Hobbit:An Unexpected Journey", "writer" : "J.R.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("60758cfc6906a1ab5e88c933"), "title" : "The Hobbit:The Desolation of Smaug", "writer" : "J.R.R.R.Tolkein", "year" : 2013, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("60758e926906a1ab5e88c934"), "title" : "The Hobbit:The Battle of the Five Armies", "writer" : "J.R.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness" }
{ "_id" : ObjectId("60758f016906a1ab5e88c935"), "title" : "Pee Wee Herman's Big Advanture" }
{ "_id" : ObjectId("60758f146906a1ab5e88c936"), "title" : "Avatar" }

2.Get all Documents with writer set to "Quentin Trantino".
 db.movies.find({writer:"Quentin Tarantino"})
{ "_id" : ObjectId("60758c016906a1ab5e88c930"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : 1994, "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("60758c136906a1ab5e88c931"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : 2009, "actor" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }

3.Get all Documents where actor include "Brad Pitt".
>  db.movies.find({actor:"Brad Pitt"})
{ "_id" : ObjectId("607587856906a1ab5e88c92f"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : 1999, "actor" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("60758c136906a1ab5e88c931"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : 2009, "actor" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }

4.Get all Documents with franchies set to "The Hobbit".
> db.movies.find({franchise : "The Hobbit"})
{ "_id" : ObjectId("60758c2c6906a1ab5e88c932"), "title" : "Hobbit:An Unexpected Journey", "writer" : "J.R.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("60758cfc6906a1ab5e88c933"), "title" : "The Hobbit:The Desolation of Smaug", "writer" : "J.R.R.R.Tolkein", "year" : 2013, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("60758e926906a1ab5e88c934"), "title" : "The Hobbit:The Battle of the Five Armies", "writer" : "J.R.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness" }

5.Get all movies released in 90s.
> db.movies.find({year:{$lt:2000}})
{ "_id" : ObjectId("607587856906a1ab5e88c92f"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : 1999, "actor" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("6075a02a6906a1ab5e88c937"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : 1994, "actors" : [ "John Travolta", "Uma Thurman" ] }

6.Get all movies relased before the year 2000 or after 2010.
> db.movies.find({$or:[{year:{$lt:2000}},{year:{$gt:2010}}]})
{ "_id" : ObjectId("607587856906a1ab5e88c92f"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : 1999, "actor" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("60758c2c6906a1ab5e88c932"), "title" : "Hobbit:An Unexpected Journey", "writer" : "J.R.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("60758cfc6906a1ab5e88c933"), "title" : "The Hobbit:The Desolation of Smaug", "writer" : "J.R.R.R.Tolkein", "year" : 2013, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("60758e926906a1ab5e88c934"), "title" : "The Hobbit:The Battle of the Five Armies", "writer" : "J.R.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness" }
{ "_id" : ObjectId("6075a02a6906a1ab5e88c937"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : 1994, "actors" : [ "John Travolta", "Uma Thurman" ] }

Update Documents:

1.Add a synopsis to "Hobbit:An Unexpected Journey":"A reluctant hobbit, Bilbo Baggins,sets out to the Lonely Mountain with a spirited group od dwarves to reclaim their mountain home- and the gold within it-from the dragon Smaug.
>db.movies.update(
{title:"Hobbit:An Unexpected Journey"},{$set:{synopsis:"A reluctant hobbit, Bilbo Baggins,sets out to the Lonely Mountain with a spirited group od dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug."}}
... )
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

2.Add a synopsis to "The Hobbit:The Desolation of Smaug":"The dwarves,along with Bilbo Baggins and Gandalf the Grey,continus their quest to reclaim Erebor,their homeland, from Smaug. Bilbo baggins is in possession of a mysterious and magical ring.
>  db.movies.update({title:"The Hobbit:The Desolation of Smaug"},{$set:{synopsis:"The dwarves,along with Bilbo Baggins and Grandalf the Grey,continus their quest to reclaim Erebor,their homeland, from Smaug. Bilbo baggins is in possession of a mysterious and magical ring."}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

3.Add an actor "Samuel L.Jackon" to the movie "Pulp Fiction".
>db.movies.update({title : "Pulp Fiction"},{$set:{actors:["John Travolta", "Uma Thurman","Samuel L.Jackon"]}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

Text Search:

1.Find all movies that have asynopsis that contain the word "Bilbo".
> db.movies.find({$text:{$search:"Bilbo"}}).pretty()
{
        "_id" : ObjectId("60758cfc6906a1ab5e88c933"),
        "title" : "The Hobbit:The Desolation of Smaug",
        "writer" : "J.R.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves,along with Bilbo Baggins and Gandalf the Grey,continus their quest to reclaim Erebor,their homeland, from Smaug. Bilbo baggins is in possession of a mysterious and magical ring."
}
{
        "_id" : ObjectId("60758e926906a1ab5e88c934"),
        "title" : "The Hobbit:The Battle of the Five Armies",
        "writer" : "J.R.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness"
}
{
        "_id" : ObjectId("60758c2c6906a1ab5e88c932"),
        "title" : "Hobbit:An Unexpected Journey",
        "writer" : "J.R.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit, Bilbo Baggins,sets out to the Lonely Mountain with a spirited group od dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug."
}

2.Find all movies that have asynopsis that contain the word "Gandalf".
> db.movies.find({$text:{$search:"Gandalf"}}).pretty()
{
        "_id" : ObjectId("60758cfc6906a1ab5e88c933"),
        "title" : "The Hobbit:The Desolation of Smaug",
        "writer" : "J.R.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves,along with Bilbo Baggins and Gandalf the Grey,continus their quest to reclaim Erebor,their homeland, from Smaug. Bilbo baggins is in possession of a mysterious and magical ring."
}

3.Find all movies that have asynopsis that contain the word "Bilbo" and not the "Gandalf".
> db.movies.find({$text:{$search:"Bilbo -Grandalf"}}).pretty()
{
        "_id" : ObjectId("60758e926906a1ab5e88c934"),
        "title" : "The Hobbit:The Battle of the Five Armies",
        "writer" : "J.R.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness"
}
{
        "_id" : ObjectId("60758c2c6906a1ab5e88c932"),
        "title" : "Hobbit:An Unexpected Journey",
        "writer" : "J.R.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit, Bilbo Baggins,sets out to the Lonely Mountain with a spirited group od dwarves to reclaim their mountain homw-and the gold within it-from the dragon Smaug."
}

4.Find all movies that have asynopsis that contain the word "dwarves"or "hobbit".
> db.movies.find({$text:{$search:"hobbit dwarves"}}).pretty()
{
        "_id" : ObjectId("60758cfc6906a1ab5e88c933"),
        "title" : "The Hobbit:The Desolation of Smaug",
        "writer" : "J.R.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves,along with Bilbo Baggins and Grandalf the Grey,continus their quest to reclaim Erebor,their homeland, from Smaug. Bilbo baggins is in possession of a mysterious and magical ring."
}
{
        "_id" : ObjectId("60758c2c6906a1ab5e88c932"),
        "title" : "Hobbit:An Unexpected Journey",
        "writer" : "J.R.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit, Bilbo Baggins,sets out to the Lonely Mountain with a spirited group od dwarves to reclaim their mountain homw-and the gold within it-from the dragon Smaug."
}

5.Find all movies that have asynopsis that contain the word "gold" and "dragon".
> db.movies.find({$text:{$search:"gold dragon"}}).pretty()
{
        "_id" : ObjectId("60758c2c6906a1ab5e88c932"),
        "title" : "Hobbit:An Unexpected Journey",
        "writer" : "J.R.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit, Bilbo Baggins,sets out to the Lonely Mountain with a spirited group od dwarves to reclaim their mountain homw-and the gold within it-from the dragon Smaug."
}

Delete Documents:
1.Delete the movie "Pee Wee Herman's Big Advanture"
>  db.movies.remove({title:"Pee Wee Herman's Big Advanture"})
WriteResult({ "nRemoved" : 1 })

2.delete the movie "Avatar".
> db.movies.remove({title:"Avatar"})
WriteResult({ "nRemoved" : 1 })

Querying related collections:
1.Find all users:
db.users.find()
{ "_id" : ObjectId("6077153e6b62a9b208bd8f06"), "username" : "GoodGuyGreg", "first_name" : "GoodGuy", "last_name" : "Grey" }
{ "_id" : ObjectId("607716b36b62a9b208bd8f07"), "username" : "ScumbagSteve", "full_name" : { "first" : "Scumbag", "last" : "Steve" } }

2.Find all posts:
db.posts.find()
{ "_id" : ObjectId("607717be6b62a9b208bd8f08"), "username" : "GoodGuyGreg", "title" : "Passes out at party", "body" : "Wakes up early and cleans house" }
{ "_id" : ObjectId("6077180a6b62a9b208bd8f09"), "username" : "GoodGuyGreg", "title" : "Steals yors identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("6077183e6b62a9b208bd8f0a"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends you a Pull Request" }
{ "_id" : ObjectId("6077188c6b62a9b208bd8f0b"), "username" : "ScumbagSteve", "title" : "Borrows something", "body" : "Sells it" }
{ "_id" : ObjectId("607718ac6b62a9b208bd8f0c"), "username" : "ScumbagSteve", "title" : "Borrows everything", "body" : "The end" }
{ "_id" : ObjectId("607718d46b62a9b208bd8f0d"), "username" : "ScumbagSteve", "title" : "Forks your repo on github", "body" : "Sets to private" }

3.Find all posts that was authored by "GoodGuyGreg".
db.posts.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("607717be6b62a9b208bd8f08"), "username" : "GoodGuyGreg", "title" : "Passes out at party", "body" : "Wakes up early and cleans house" }
{ "_id" : ObjectId("6077180a6b62a9b208bd8f09"), "username" : "GoodGuyGreg", "title" : "Steals yors identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("6077183e6b62a9b208bd8f0a"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends you a Pull Request" }

4.Find all posts that was authored by "ScumbagSteve".
db.posts.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("6077188c6b62a9b208bd8f0b"), "username" : "ScumbagSteve", "title" : "Borrows something", "body" : "Sells it" }
{ "_id" : ObjectId("607718ac6b62a9b208bd8f0c"), "username" : "ScumbagSteve", "title" : "Borrows everything", "body" : "The end" }
{ "_id" : ObjectId("607718d46b62a9b208bd8f0d"), "username" : "ScumbagSteve", "title" : "Forks your repo on github", "body" : "Sets to private" }

5.Find all comments.
db.comments.find()
{ "_id" : ObjectId("6077216c6b62a9b208bd8f11"), "username" : "GoodGuyGreg", "comment" : "Hope you got a good deal!", "post" : ObjectId("6077188c6b62a9b208bd8f0b") }
{ "_id" : ObjectId("607721936b62a9b208bd8f12"), "username" : "GoodGuyGreg", "comment" : "What's mine is yours!", "post" : ObjectId("607718ac6b62a9b208bd8f0c") }
{ "_id" : ObjectId("6077219a6b62a9b208bd8f13"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agrement!", "post" : ObjectId("607718d46b62a9b208bd8f0d") }
{ "_id" : ObjectId("6077221a6b62a9b208bd8f14"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("607717be6b62a9b208bd8f08") }
{ "_id" : ObjectId("607722976b62a9b208bd8f15"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("6077183e6b62a9b208bd8f0a") }

6.Find all comments that was authored by "GoodGuyGreg".
db.comments.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("6077216c6b62a9b208bd8f11"), "username" : "GoodGuyGreg", "comment" : "Hope you got a good deal!", "post" : ObjectId("6077188c6b62a9b208bd8f0b") }
{ "_id" : ObjectId("607721936b62a9b208bd8f12"), "username" : "GoodGuyGreg", "comment" : "What's mine is yours!", "post" : ObjectId("607718ac6b62a9b208bd8f0c") }
{ "_id" : ObjectId("6077219a6b62a9b208bd8f13"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agrement!", "post" : ObjectId("607718d46b62a9b208bd8f0d") }

7.Find all comments that was authored by "ScumbagSteve".
 db.comments.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("6077221a6b62a9b208bd8f14"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("607717be6b62a9b208bd8f08") }
{ "_id" : ObjectId("607722976b62a9b208bd8f15"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("6077183e6b62a9b208bd8f0a") }

8.Find all comments belonging to post "Reports a bug in your code".
 db.posts.aggregate([{$match:{title:'Reports a bug in your code'}},{$lookup:{from:'comments', localField:'_id',foreignField:'post',as:'comments'}}]).pretty()
{
        "_id" : ObjectId("6077183e6b62a9b208bd8f0a"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a Pull Request",
        "comments" : [
                {
                        "_id" : ObjectId("607722976b62a9b208bd8f15"),
                        "username" : "ScumbagSteve",
                        "comment" : "Denied your PR cause I found a hack",
                        "post" : ObjectId("6077183e6b62a9b208bd8f0a")
                }
        ]
}


